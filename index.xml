<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>RyoM.net</title><link>https://ryo-m-49.github.io/blog/</link><description>Recent content on RyoM.net</description><image><url>https://ryo-m-49.github.io/blog/profile.png</url><link>https://ryo-m-49.github.io/blog/profile.png</link></image><generator>Hugo -- gohugo.io</generator><language>ja-jp</language><lastBuildDate>Wed, 01 Mar 2023 22:10:21 +0900</lastBuildDate><atom:link href="https://ryo-m-49.github.io/blog/index.xml" rel="self" type="application/rss+xml"/><item><title>2023/02のストックした記事</title><link>https://ryo-m-49.github.io/blog/posts/stock-of-feb-2023/</link><pubDate>Wed, 01 Mar 2023 22:10:21 +0900</pubDate><guid>https://ryo-m-49.github.io/blog/posts/stock-of-feb-2023/</guid><description>業務で扱ったキーワード ログ設計 Go(1.20, Slice, Value/Pointer) 社内勉強会主催したので調べた TypeScript 5.0 AWS Parameter Store プライベートで扱ったキーワード Next.js ChatGPT プロダクト開発論 パスワード管理 一覧 https://pattern-windscreen-cc2.notion.site/2023-02-a8b1246bebee4262bb368de27e0a5550
Go 1.20 vet のアップデート
どのように 1Password へのログイン方法を管理しているか
【第 1 回・前編】 エンジニア和田卓人の今を形作る技術 | GeeklyMedia(ギークリーメディア)
【Go】go.mod の replace でローカルのモジュールを参照する : ビジネスと IT 活用に役立つ情報（株式会社アーティス）
Go におけるパッケージのインポート方法いろいろ～ローカル環境のパッケージをインポートしたい～ - Qiita
CTO から見た，なぜスタートアップ初期のソフトウェア設計は壊れがちなのか - Speaker Deck
[AWS Lambda] Parameter Store から取得したパラメータをグローバル変数でキャッシュする | DevelopersIO
本当に SSR する必要があるのか考えてみた話 - Qiita
Uh-Oh’s in Go — Slice of Pointers | by Nitish Malhotra | Codezillas | Medium</description></item><item><title>2023/01のストックした記事</title><link>https://ryo-m-49.github.io/blog/posts/stock-of-jan-2023/</link><pubDate>Wed, 01 Feb 2023 21:04:26 +0900</pubDate><guid>https://ryo-m-49.github.io/blog/posts/stock-of-jan-2023/</guid><description>業務で扱ったキーワード パフォーマンスチューニング Go1.20 AWS(ECS, VPC) プライベートで扱ったキーワード GraphQL Hasura GCP(CloudRun, FirebaseHosting, GAR, Cloud IAM, SecretManager) キャリア論 一覧 https://pattern-windscreen-cc2.notion.site/2023-01-470f7f7dbe3a4a59b7ae27400f70860e
サーバーレス環境をより改善してみた話
2022 年に読んでよかった O&amp;rsquo;Reilly 書籍をまとめた
技術書の予習と復習
リンク/ボタン/フォームをより良くする HTML・CSS 17 選 - ICS MEDIA
ストーリー性のあるプレゼン - id:onk のはてなブログ https://onk.hatenablog.jp/entry/2023/01/02/000000
[レポート] 脅威検知とインシデント対応の自動化についてのワークショップに参加しました / Automating threat detection &amp;amp; incident response in your AWS environments #reinvent #SUP301-R1 | DevelopersIO
どうして自分を過小評価するのかと言われた話 https://blog.ojisan.io/i-am-dekinai-engineer/
熱量を失ったサーバーレスという世界（個人の所感） - Sweet Escape
業務アプリケーション開発に Go を採用する理由
これから影響力を持ちたい人は何から発信するといいのかを考えてみた｜けんすう
安く早く開発するための個人開発アーキテクチャ
仕事力と技術力と不安に関する雑文
エンジニアの勉強と技術力と育児 | 外道父の匠</description></item><item><title>Docker再入門したので読んだ資料まとめ</title><link>https://ryo-m-49.github.io/blog/posts/docker-recap/</link><pubDate>Thu, 19 Jan 2023 00:42:42 +0900</pubDate><guid>https://ryo-m-49.github.io/blog/posts/docker-recap/</guid><description>今の会社に転職する前にDockerを個人で触って勉強していたものの、結局今の会社ではほぼゼロからDocker周りのファイルを書いたりすることもなく、せいぜいDockerfileやdocker-compose.ymlを眺める程度のことしかしないままなんとなくここまで来てしまったので、基本的なことをしっかり学びなおそうと思い本と記事をいくつか読んだので備忘録。
プログラマのためのDocker教科書 第2版 インフラの基礎知識&amp;amp;コードによる環境構築の自動化 Dockerに直接関係ないインフラ周りの話やLinuxの話から始まり、Dockerの基本的な仕組みやコマンド、実運用での使い方まで幅広く書かれていて復習に良かった。Dockerがどういう仕組みで動いているのかということやDockerfileからビルドするときの挙動の話など、そういえば昔なんか見たなあ、みたいな話も含め思い出すことができた。
実践 Docker - ソフトウェアエンジニアの「Docker よくわからない」を終わりにする本 これ無料で読めるのやばい。上の本の補足として読みましたがめちゃくちゃわかりやすいのでこれ一つでもいいぐらい。
Docker/Kubernetesを扱う上で必要なネットワークの基礎知識 上の2つ読んでて、ネットワーク周りがどうなってるのかいまいち理解しきれなかったので調べて見つけた記事。ネットワークの基礎知識のところから、Dockerのネットワークの仕組みまで順序だてて説明されていてとてもわかりやすかった。ネットワークの基本的な知識も抜け落ちてたのでその辺も再入門したくなってきた。
【連載】世界一わかりみが深いコンテナ &amp;amp; Docker入門 〜 その5:Dockerのネットワークってどうなってるの？ 〜 こちらもネットワーク関係。簡潔にまとまっていてわかりやすい。その6：Dockerのファイルシステムってどうなってるの？もよかった。</description></item><item><title>ブログ作り直した</title><link>https://ryo-m-49.github.io/blog/posts/first-post/</link><pubDate>Fri, 16 Dec 2022 01:01:56 +0900</pubDate><guid>https://ryo-m-49.github.io/blog/posts/first-post/</guid><description>ヘッドレスCMSからHugoへ移行した話</description></item><item><title>Resume</title><link>https://ryo-m-49.github.io/blog/resume/</link><pubDate>Fri, 16 Dec 2022 00:34:43 +0900</pubDate><guid>https://ryo-m-49.github.io/blog/resume/</guid><description>経歴 2021/10 - 現在：株式会社 Yappli プロジェクト ノーコードでアプリを作成できるプラットフォームの各機能開発 中小企業向けの低料金サービス「Yappli Lite」の機能開発および運用保守 Push 通知配信基盤の運用保守、問い合わせ対応、インシデント対応 Push 通知配信基盤改善プロジェクト（エンジニア 6 名）のリードエンジニアを担当 2 名のサーバーサイドエンジニアインターン生の受け入れおよびメンターを担当 利用技術 フロントエンド Vue, Nuxt.js, TypeScript バックエンド Go, PHP, Laravel, インフラ ECS, Fargate, EC2, S3, CloudFront その他ツール Github, CircleCI, NewRelic, Redash, CloudWatch, BigQuery, Jira, Confluence, Slack 2020/08 - 2021/10 株式会社 nu-face プロジェクト サーバー構築、メンテナンス サーバーの物理的なセットアップからデータセンターの設置まで パフォーマンス監視およびメンテナンス 受託システムの開発、運用保守 オンラインフィットネスシステムの開発、運用保守 福祉タクシー予約システムの開発、運用保守 自社サービスの開発、運用保守 広告クリックログ管理システムのリプレイス ノーコードウェブサイト構築サービスの新規開発 利用技術 フロントエンド JavaScript, jQuery バックエンド PHP, Laravel インフラ オンプレミス その他ツール GitBucket, Mattermost</description></item></channel></rss>